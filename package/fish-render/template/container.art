import React, { {{each $imports.utils.objectKeys($data.Hooks)}}{{if $data.Hooks[$value].length}}{{$value}},{{/if}}{{/each}} } from 'react';


interface PropsType {


}


const {{$data.componentName}}: React.FC<PropsType> = props => {

// useState
{{if $data.Hooks.useState.length}}{{each $data.Hooks.useState}}
	[{{$value.stateName}}, set{{$imports.utils.firstToUpper($value.stateName)}}] = useState<{{$value.type || 'any'}}>({{$value.params}});
{{/each}}{{/if}}

// useRef
{{if $data.Hooks.useRef.length}}{{each $data.Hooks.useRef}}
	const {{$value.refName}} = useRef<{{$value.type || 'any'}}>({{$value.params}});
{{/each}}{{/if}}

// useLayoutEffect
{{if $data.Hooks.useLayoutEffect.length}}{{each $data.Hooks.useLayoutEffect}}
	useLayoutEffect(() => {
	{{$imports.utils.getFuncBody($value.funcContent)}},
	}, [{{each $value.deps}}{{$value}}{{/each}}]);
{{/each}}{{/if}}

// useEffect
{{if $data.Hooks.useEffect.length}}{{each $data.Hooks.useEffect}}
	useEffect(() => {
		{{$imports.utils.getFuncBody($value.funcContent)}},
	}, [{{each $value.deps}}{{$value}}{{/each}}]);
{{/each}}{{/if}}

// useCallback
{{if $data.Hooks.useCallback.length}}{{each $data.Hooks.useCallback}}
	const {{$value.funcName}} = useCallback({{$imports.utils.isAsyncFunc($value.funcContent) ? 'async' : ''}} ({{$imports.utils.getFuncParams($value.funcContent, $value.params)}}) => {
				{{$imports.utils.getFuncBody($value.funcContent)}}
			}, 
			[{{each $value.deps}}{{$value}}{{/each}}]
		);
{{/each}}{{/if}}

// useMemo
{{if $data.Hooks.useMemo.length}}
{{each $data.Hooks.useMemo}}
	const {{$data.Hooks.useMemo.memoName}}  = useMemo(
		{{$imports.utils.getFunc($value.funcContent)}},
		[{{each $value.deps}}{{$value}}{{/each}}]
	);
{{/each}}
{{/if}}

    return (
{{if $data.Return.length}}{{each $data.Return}}
		{{include './component.art' $value}}
{{/each}}{{/if}}
    )
}


export default {{$data.componentName}};